/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubesphere.io/kubesphere/pkg/apis/infra/v1alpha1"
)

// EdgeClusterLister helps list EdgeClusters.
// All objects returned here must be treated as read-only.
type EdgeClusterLister interface {
	// List lists all EdgeClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeCluster, err error)
	// EdgeClusters returns an object that can list and get EdgeClusters.
	EdgeClusters(namespace string) EdgeClusterNamespaceLister
	EdgeClusterListerExpansion
}

// edgeClusterLister implements the EdgeClusterLister interface.
type edgeClusterLister struct {
	indexer cache.Indexer
}

// NewEdgeClusterLister returns a new EdgeClusterLister.
func NewEdgeClusterLister(indexer cache.Indexer) EdgeClusterLister {
	return &edgeClusterLister{indexer: indexer}
}

// List lists all EdgeClusters in the indexer.
func (s *edgeClusterLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeCluster))
	})
	return ret, err
}

// EdgeClusters returns an object that can list and get EdgeClusters.
func (s *edgeClusterLister) EdgeClusters(namespace string) EdgeClusterNamespaceLister {
	return edgeClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EdgeClusterNamespaceLister helps list and get EdgeClusters.
// All objects returned here must be treated as read-only.
type EdgeClusterNamespaceLister interface {
	// List lists all EdgeClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeCluster, err error)
	// Get retrieves the EdgeCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EdgeCluster, error)
	EdgeClusterNamespaceListerExpansion
}

// edgeClusterNamespaceLister implements the EdgeClusterNamespaceLister
// interface.
type edgeClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EdgeClusters in the indexer for a given namespace.
func (s edgeClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeCluster))
	})
	return ret, err
}

// Get retrieves the EdgeCluster from the indexer for a given namespace and name.
func (s edgeClusterNamespaceLister) Get(name string) (*v1alpha1.EdgeCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("edgecluster"), name)
	}
	return obj.(*v1alpha1.EdgeCluster), nil
}
