/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/edgewize-io/edgewize/pkg/apis/infra/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VClusterNamespaceLister helps list VClusterNamespaces.
// All objects returned here must be treated as read-only.
type VClusterNamespaceLister interface {
	// List lists all VClusterNamespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VClusterNamespace, err error)
	// VClusterNamespaces returns an object that can list and get VClusterNamespaces.
	VClusterNamespaces(namespace string) VClusterNamespaceNamespaceLister
	VClusterNamespaceListerExpansion
}

// vClusterNamespaceLister implements the VClusterNamespaceLister interface.
type vClusterNamespaceLister struct {
	indexer cache.Indexer
}

// NewVClusterNamespaceLister returns a new VClusterNamespaceLister.
func NewVClusterNamespaceLister(indexer cache.Indexer) VClusterNamespaceLister {
	return &vClusterNamespaceLister{indexer: indexer}
}

// List lists all VClusterNamespaces in the indexer.
func (s *vClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VClusterNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VClusterNamespace))
	})
	return ret, err
}

// VClusterNamespaces returns an object that can list and get VClusterNamespaces.
func (s *vClusterNamespaceLister) VClusterNamespaces(namespace string) VClusterNamespaceNamespaceLister {
	return vClusterNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VClusterNamespaceNamespaceLister helps list and get VClusterNamespaces.
// All objects returned here must be treated as read-only.
type VClusterNamespaceNamespaceLister interface {
	// List lists all VClusterNamespaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VClusterNamespace, err error)
	// Get retrieves the VClusterNamespace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VClusterNamespace, error)
	VClusterNamespaceNamespaceListerExpansion
}

// vClusterNamespaceNamespaceLister implements the VClusterNamespaceNamespaceLister
// interface.
type vClusterNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VClusterNamespaces in the indexer for a given namespace.
func (s vClusterNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VClusterNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VClusterNamespace))
	})
	return ret, err
}

// Get retrieves the VClusterNamespace from the indexer for a given namespace and name.
func (s vClusterNamespaceNamespaceLister) Get(name string) (*v1alpha1.VClusterNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vclusternamespace"), name)
	}
	return obj.(*v1alpha1.VClusterNamespace), nil
}
